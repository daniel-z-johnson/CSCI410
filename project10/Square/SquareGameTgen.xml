<tokens>
<symbol> /  </symbol>
<symbol> *  </symbol>
<symbol> *  </symbol>
<symbol> *  </symbol>
<identifier> The  </identifier>
<identifier> SquareDance  </identifier>
<keyword> class  </keyword>
<identifier> implements  </identifier>
<identifier> the  </identifier>
<identifier> Square  </identifier>
<identifier> Dance  </identifier>
<identifier> game  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<identifier> In  </identifier>
<keyword> this  </keyword>
<identifier> game  </identifier>
<identifier> you  </identifier>
<identifier> can  </identifier>
<identifier> move  </identifier>
<identifier> a  </identifier>
<identifier> black  </identifier>
<identifier> square  </identifier>
<identifier> around  </identifier>
<identifier> the  </identifier>
<identifier> screen  </identifier>
<identifier> and  </identifier>
<symbol> *  </symbol>
<identifier> change  </identifier>
<identifier> its  </identifier>
<identifier> size  </identifier>
<identifier> during  </identifier>
<identifier> the  </identifier>
<identifier> movement  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<identifier> In  </identifier>
<identifier> the  </identifier>
<identifier> beggining  </identifier>
<symbol> ,  </symbol>
<identifier> the  </identifier>
<identifier> square  </identifier>
<identifier> is  </identifier>
<identifier> located  </identifier>
<identifier> at  </identifier>
<identifier> the  </identifier>
<identifier> top  </identifier>
<identifier> left  </identifier>
<identifier> corner  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<identifier> Use  </identifier>
<identifier> the  </identifier>
<identifier> arrow  </identifier>
<identifier> keys  </identifier>
<identifier> to  </identifier>
<identifier> move  </identifier>
<identifier> the  </identifier>
<identifier> square  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<identifier> Use  </identifier>
<identifier> 'z'  </identifier>
<symbol> &amp;  </symbol>
<identifier> 'x'  </identifier>
<identifier> to  </identifier>
<identifier> decrement  </identifier>
<symbol> &amp;  </symbol>
<identifier> increment  </identifier>
<identifier> the  </identifier>
<identifier> size  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<identifier> Use  </identifier>
<identifier> 'q'  </identifier>
<identifier> to  </identifier>
<identifier> quit  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<symbol> /  </symbol>
<keyword> class  </keyword>
<identifier> SquareGame  </identifier>
<symbol> {  </symbol>
<keyword> field  </keyword>
<identifier> Square  </identifier>
<identifier> square  </identifier>
<symbol> ;  </symbol>
<keyword> field  </keyword>
<keyword> int  </keyword>
<identifier> direction  </identifier>
<symbol> ;  </symbol>
<keyword> constructor  </keyword>
<identifier> SquareGame  </identifier>
<identifier> new  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> square  </identifier>
<symbol> =  </symbol>
<identifier> Square  </identifier>
<symbol> .  </symbol>
<identifier> new  </identifier>
<symbol> (  </symbol>
<integerConstant> 0  </integerConstant>
<symbol> ,  </symbol>
<integerConstant> 0  </integerConstant>
<symbol> ,  </symbol>
<integerConstant> 30  </integerConstant>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> let  </keyword>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 0  </integerConstant>
<symbol> ;  </symbol>
<keyword> return  </keyword>
<keyword> this  </keyword>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> method  </keyword>
<keyword> void  </keyword>
<identifier> dispose  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> dispose  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> do  </keyword>
<identifier> Memory  </identifier>
<symbol> .  </symbol>
<identifier> deAlloc  </identifier>
<symbol> (  </symbol>
<keyword> this  </keyword>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> return  </keyword>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<symbol> /  </symbol>
<symbol> *  </symbol>
<symbol> *  </symbol>
<identifier> Starts  </identifier>
<identifier> the  </identifier>
<identifier> game  </identifier>
<symbol> .  </symbol>
<identifier> Handles  </identifier>
<identifier> inputs  </identifier>
<identifier> from  </identifier>
<identifier> the  </identifier>
<identifier> user  </identifier>
<identifier> that  </identifier>
<identifier> controls  </identifier>
<symbol> *  </symbol>
<identifier> the  </identifier>
<identifier> square  </identifier>
<identifier> movement  </identifier>
<identifier> direction  </identifier>
<identifier> and  </identifier>
<identifier> size  </identifier>
<symbol> .  </symbol>
<symbol> *  </symbol>
<symbol> /  </symbol>
<keyword> method  </keyword>
<keyword> void  </keyword>
<identifier> run  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> var  </keyword>
<keyword> char  </keyword>
<identifier> key  </identifier>
<symbol> ;  </symbol>
<keyword> var  </keyword>
<keyword> boolean  </keyword>
<identifier> exit  </identifier>
<symbol> ;  </symbol>
<keyword> let  </keyword>
<identifier> exit  </identifier>
<symbol> =  </symbol>
<keyword> false  </keyword>
<symbol> ;  </symbol>
<keyword> while  </keyword>
<symbol> (  </symbol>
<symbol> ~  </symbol>
<identifier> exit  </identifier>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> while  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 0  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> key  </identifier>
<symbol> =  </symbol>
<identifier> Keyboard  </identifier>
<symbol> .  </symbol>
<identifier> keyPressed  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> do  </keyword>
<identifier> moveSquare  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 81  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> exit  </identifier>
<symbol> =  </symbol>
<keyword> true  </keyword>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 90  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> decSize  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 88  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> incSize  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 131  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 1  </integerConstant>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 133  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 2  </integerConstant>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 130  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 3  </integerConstant>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 132  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 4  </integerConstant>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> while  </keyword>
<symbol> (  </symbol>
<symbol> ~  </symbol>
<symbol> (  </symbol>
<identifier> key  </identifier>
<symbol> =  </symbol>
<integerConstant> 0  </integerConstant>
<symbol> )  </symbol>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> let  </keyword>
<identifier> key  </identifier>
<symbol> =  </symbol>
<identifier> Keyboard  </identifier>
<symbol> .  </symbol>
<identifier> keyPressed  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> do  </keyword>
<identifier> moveSquare  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<symbol> }  </symbol>
<keyword> return  </keyword>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> method  </keyword>
<keyword> void  </keyword>
<identifier> moveSquare  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 1  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> moveUp  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 2  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> moveDown  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 3  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> moveLeft  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> if  </keyword>
<symbol> (  </symbol>
<identifier> direction  </identifier>
<symbol> =  </symbol>
<integerConstant> 4  </integerConstant>
<symbol> )  </symbol>
<symbol> {  </symbol>
<keyword> do  </keyword>
<identifier> square  </identifier>
<symbol> .  </symbol>
<identifier> moveRight  </identifier>
<symbol> (  </symbol>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<keyword> do  </keyword>
<identifier> Sys  </identifier>
<symbol> .  </symbol>
<identifier> wait  </identifier>
<symbol> (  </symbol>
<integerConstant> 5  </integerConstant>
<symbol> )  </symbol>
<symbol> ;  </symbol>
<keyword> return  </keyword>
<symbol> ;  </symbol>
<symbol> }  </symbol>
<symbol> }  </symbol>
</tokens>
