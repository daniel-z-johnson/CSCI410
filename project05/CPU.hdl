// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
        Mux16(a=instruction, b=ALUout, sel=instruction[15], out=fmux);//first mux

        Not(in=instruction[15], out=not15);//load A logic
        Or(a=not15, b=instruction[5], out=loadA);
        ARegister(in=fmux, load=loadA, out=toMux2, out[0..14]=addressM, out=toPC);

        Mux16(a=toMux2, b=inM, sel=instruction[12], out=toALU);//secound mux

        And(a=instruction[4], b=instruction[15], out=loadD);//load D logic
        DRegister(in=ALUout, load=loadD, out=out);

        ALU(x=out, y=toALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=z, ng=n);//ALU du
        
        Or(a=instruction[3], b=instruction[3], out=pwriteM);//Write M logic
        And(a=pwriteM, b=instruction[15], out=writeM);
        
        Not(in=n, out=nn);// JUMP logic
        Not(in=z, out=notz);
        And(a=n, b=instruction[2], out=t1);
        And(a=nn, b=instruction[0], out=pt2);
        And(a=pt2, b=notz, out=t2);
        And(a=z, b=instruction[1], out=t3);
        Or(a=t1, b=t2, out=p);
        Or(a=p, b=t3, out=pll);
        And(a=pll, b=instruction[15], out=fin);

        PC(in=toPC, inc=true, load=fin, reset=reset, out[0..14]=pc);
}
